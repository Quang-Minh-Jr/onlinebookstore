pipeline {
    agent any
    environment {                 
        WARFILENAME = ""
        WARFILELOCATION = "/var/lib/jenkins/workspace/WAR_PROJECT/target"
        PROJECTNAME = "onlinebookstore"
        ImageName = "tomcatserver"
        ImageVersion = "v1"
    }
    stages {
        stage('Build') {
            agent {
                // assign packaging job for slave to execute
                label 'java_slave_container'
            }
            steps {
                //maven compile  with shell command
                sh 'mvn compile'
                //test with maven compile
                sh 'mvn test'
            }
        }
        
        stage('Package') {
            // agent {
            //     // assign packaging job for slave to execute
            //     label ''
            // }
            steps {                
                // package
                sh 'mvn package'
                //Verify
                sh 'mvn verify'
                sh "ls ${env.WARFILELOCATION}| grep war"
                //Get the name of war file and Change the environment variables
                script {
                    WARFILENAME = sh (
                        script: "ls ${env.WARFILELOCATION}| grep war",
                        returnStdout: true
                    ).trim() 
                }
                echo "${WARFILENAME}"
            }
        }  
        
        stage('Deploy') {
            // agent {
            //     // assign packaging job for slave to execute
            //     label ''
            // }
            steps {
                echo 'ready to deploy'
                // Get the war file path
                echo "${WARFILENAME}"
                echo "${WORKSPACE}"
                sh "cp ${env.WARFILELOCATION}/${WARFILENAME} ${env.WORKSPACE}/jenkins/${PROJECTNAME}.war"
                // build the image with war file path "warfile"
                dir('jenkins') {
                    sh "docker build -t ${ImageName}:${ImageVersion} \
                        --build-arg warfile=${PROJECTNAME}.war ."
                    // Run the docker container with new image
                    sh 'docker run -it -d --name ${PROJECTNAME} -p 8888:8080 ${ImageName}:${ImageVersion}' 
                }       
            }
        }
    }
    post{
        always{
            cleanWS()
        }
    }
}
